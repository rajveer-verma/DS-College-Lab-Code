#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the Binary Search Tree
struct Node
{
    int data;
    struct Node *left, *right;
};

// Function to create a new node
struct Node *createNode(int data)
{
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Insert a node into the BST
struct Node *insert(struct Node *root, int data)
{
    if (!root)
        return createNode(data);
    if (data < root->data)
        root->left = insert(root->left, data);
    else if (data > root->data)
        root->right = insert(root->right, data);
    return root;
}

// Inorder Traversal (Left, Root, Right)
void inorder(struct Node *root)
{
    if (root)
    {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

// Preorder Traversal (Root, Left, Right)
void preorder(struct Node *root)
{
    if (root)
    {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

// Postorder Traversal (Left, Right, Root)
void postorder(struct Node *root)
{
    if (root)
    {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

// Search for a node in the BST
struct Node *search(struct Node *root, int key)
{
    // Base case: root is NULL or key is present at root
    if (root == NULL || root->data == key)
    {
        return root;
    }

    // Key is greater than root's data, search in the right subtree
    if (key > root->data)
    {
        return search(root->right, key);
    }

    // Key is smaller than root's data, search in the left subtree
    return search(root->left, key);
}
// Main function with menu-driven interface
int main()
{
    struct Node *root = NULL;
    int choice, data, n, key;

    // Initially show the menu
    printf("\nMenu:\n1. Create BST\n2. Inorder Traversal\n3. Preorder Traversal\n4. Postorder Traversal\n5. Search Element\n6. Exit\n");

    while (1)
    {
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            printf("Enter number of elements: ");
            scanf("%d", &n);
            printf("Enter %d integers:\n", n);
            while (n--)
            {
                scanf("%d", &data);
                root = insert(root, data);
            }
            break;
        case 2:
            printf("Inorder: ");
            inorder(root);
            printf("\n");
            break;
        case 3:
            printf("Preorder: ");
            preorder(root);
            printf("\n");
            break;
        case 4:
            printf("Postorder: ");
            postorder(root);
            printf("\n");
            break;
        case 5:
            printf("Enter element to search: ");
            scanf("%d", &key);
            if (search(root, key))
                printf("Element %d found.\n", key);
            else
                printf("Element %d not found.\n", key);
            break;
        case 6:
            printf("Exiting program...\n");
            return 0; // Exit the program
        default:
            printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}
